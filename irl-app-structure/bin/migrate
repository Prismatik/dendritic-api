#!/usr/bin/env node

const co = require('co');
const { thinky: { r } } = require('../config');
const migration = require('../src/utils/migration');
const log = require('../src/utils/logger');

const command = process.argv[2];
const arg1 = process.argv[3];

co(start)
  .then(() => process.exit(0))
  .catch(error => {
    log.error('migration error', error);
    process.exit(1);
  });

function* start() {
  switch (command) {
    case 'up': return yield migrateUp(arg1);
    case 'down': return yield migrateDown(arg1);
    case 'list': return yield listMigrations();
    case 'rollback': return yield rollbackLastMigration();
    case 'show_mutex': return yield showMutex();
    case 'release_mutex': return yield releaseMutex();

    default:
      throw new Error('usage: migrate [COMMAND] [ARGUMENTS]');
  }
}

function* migrateUp(name) {
  yield migration.up(name);
}

function* migrateDown(name) {
  if (name) {
    yield migration.down(name);
  } else {
    throw new Error('migrate down requires a [FILENAME] as the first arguement');
  }
}

function* rollbackLastMigration() {
  const list = yield migration.list();
  const applied = list.filter(migration => migration.applied);
  const lastMigration = applied[applied.length - 1];

  if (lastMigration) {
    yield migrateDown(lastMigration.name);
  } else {
    throw new Error('there is no migrations applied');
  }
}

function* listMigrations() {
  const list = yield migration.list();

  list.forEach(migration => console.log(
    migration.applied ? '✔︎' : '-',
    migration.name
  ));
}

function* showMutex() {
  console.log(yield migration.queryMutex());
}

function* releaseMutex() {
  console.log(yield migration.releaseMutex());
}
