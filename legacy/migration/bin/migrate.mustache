#!/usr/bin/env node

require('co')(function *() {
  const migrate = require('../src/utils/migrate');
  const log = require('../src/utils/logger');
  const { thinky: { r } } = require('../config');

  const commands = [
    'release_mutex',
    'show_mutex',
    'list',
    'up',
    'down'
  ];

  const command = process.argv[2];
  const arg1 = process.argv[3];

  const barf = (msg) => {
    log.error('migration error', msg);
    process.exit(1);
  };

  if (!command) {
    barf('usage: migrate [COMMAND] [ARGUMENTS]');
  }

  if (commands.indexOf(command) < 0) {
    barf(`migration command must be one of: ${commands.join(' ')}`);
  }

  if (command === 'up' && arg1) {
    barf('migrate up does not take an argument');
  }

  if (command === 'down' && !arg1) {
    barf('migrate down requires a [FILENAME] as the first arguement');
  }

  if (command === 'release_mutex' && arg1) {
    barf('migrate release_mutex does not take an argument');
  }

  if (command === 'show_mutex' && arg1) {
    barf('migrate show_mutex does not take an argument');
  }

  if (command === 'release_mutex') {
    try {
      const output = yield migrate.releaseMutex();
      console.log(output);
      yield r.getPoolMaster().drain();
      process.exit();
    } catch (e) {
      barf(e.message);
    }
  }

  if (command === 'show_mutex') {
    try {
      const output = yield migrate.queryMutex();
      console.log(output);
      yield r.getPoolMaster().drain();
      process.exit();
    } catch (e) {
      barf(e.message);
    }
  }

  if (command === 'list') {
    try {
      const list = yield migrate.list();
      list.forEach(migration => console.log(JSON.stringify(migration)));
      yield r.getPoolMaster().drain();
      process.exit();
    } catch (e) {
      barf(e.message);
    }
  }

  if (command === 'up' || command === 'down') {
    try {
      yield migrate[command](process.argv[3]);
      yield r.getPoolMaster().drain();
      process.exit();
    } catch (e) {
      barf(e.message);
    }
  }
});
