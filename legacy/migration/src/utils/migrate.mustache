/* eslint global-require: 'off' */
const _ = require('lodash');
const os = require('os');
const log = require('./logger');
const { thinky } = require('../../config');
const Migration = require('../models/_migration');
const migrationFiles = require('../../migrations').keys();

const { r } = thinky;

function *applyMigration(migrations, then) {
  if (migrations.length === 0) return undefined;
  const m = migrations.shift();
  yield m.func();
  yield then(m.name);
  return yield applyMigration(migrations, then);
}

function acquireMutex() {
  /* eslint no-underscore-dangle: 'off' */
  return r.branch(
    Migration.filter({ name: 'migrations_running_mutex' }).count().gt(0)._query,
    r.error('mutex locked'),
    Migration.insert({
      hostname: os.hostname(),
      name: 'migrations_running_mutex',
      d: new Date()
    })._query
  ).run();
}

function *getMigrationRecords() {
  const records = yield Migration.run();
  return records.map(_.property('name'));
}

exports.releaseMutex = function *() {
  yield thinky.dbReady();
  const mutex = yield Migration.filter({ name: 'migrations_running_mutex' }).run();
  if (mutex.length === 0) throw new Error('Mutex not found');
  return yield mutex[0].delete();
};

exports.queryMutex = function *() {
  yield thinky.dbReady();
  return yield Migration.filter({ name: 'migrations_running_mutex' }).run();
};

exports.list = function *() {
  yield thinky.dbReady();
  const migrationsApplied = yield getMigrationRecords;
  return migrationFiles.sort().map(file =>
    ({ name: file, applied: migrationsApplied.indexOf(file) > -1 })
  );
};

exports.up = function *() {
  if (migrationFiles.length < 1) throw new Error('No migration files found');

  yield thinky.dbReady();
  yield acquireMutex();
  const migrationsApplied = yield getMigrationRecords;
  const migrationsToApply = _.difference(migrationFiles, migrationsApplied);

  const toBeApplied = migrationsToApply.map(file => ({
    func: require(`migrations/${file}`).up,
    name: file
  }));

  yield applyMigration(toBeApplied, (name) => {
    log.info('migrated up', name);
    return Migration.save({ name });
  });

  yield exports.releaseMutex;
};

exports.down = function *(backstopName) {
  if (migrationFiles.length < 1) throw new Error('No migration files found');

  yield thinky.dbReady();
  yield acquireMutex();
  const records = yield getMigrationRecords;

  // safeguard to ensure migration files deleted but in database
  const migrationsApplied = _.intersection(records, migrationFiles);

  const backstop = migrationsApplied.indexOf(backstopName);
  if (backstop === -1) throw new Error('Migration could not be found');

  const migrationsToRollback = migrationFiles.splice(backstop, migrationFiles.length);
  if (migrationsToRollback.length === 0) throw new Error('No migrations to be downed');

  const toRollback = migrationsToRollback.reverse()
  .map(file => ({
    func: require(`migrations/${file}`).down,
    name: file
  }));

  yield applyMigration(toRollback, function *(name) {
    log.info('migrated down', name);
    const migrations = yield Migration.filter({ name }).run();
    return yield migrations[0].delete();
  });

  yield exports.releaseMutex;
};
